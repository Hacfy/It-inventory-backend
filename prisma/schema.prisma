generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int          @id @default(autoincrement())
  name             String
  email            String       @unique
  password         String
  phone            String
  role             Role         @default(ADMIN)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  College          College[]
  Component        Component[]
  Department       Department[]
  HOD              HOD[]
  Lab              Lab[]
  Warehouse        Warehouse[]
}

model College {
  id         Int          @id @default(autoincrement())
  name       String
  address    String
  collegeId  String       @unique
  adminId    Int
  admin      Admin        @relation(fields: [adminId], references: [id])
  Component  Component[]
  Department Department[]
  HOD        HOD[]
}

model Warehouse {
  id          Int         @id @default(autoincrement())
  name        String
  collegeId   Int
  adminId     Int
  warehouseId String      @unique
  Component   Component[]
  admin       Admin       @relation(fields: [adminId], references: [id])
}

model HOD {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  phone       String
  password    String
  collegeId   Int
  adminId     Int
  role        Role         @default(HOD)
  admin       Admin        @relation(fields: [adminId], references: [id])
  college     College      @relation(fields: [collegeId], references: [id])
  departments Department[] @relation("HODDepartments")
}

model Lab {
  id           Int         @id @default(autoincrement())
  name         String
  departmentId Int
  adminId      Int?
  Component    Component[]
  admin        Admin?      @relation(fields: [adminId], references: [id])
  department   Department  @relation(fields: [departmentId], references: [id])
}

model Component {
  id           Int           @id @default(autoincrement())
  name         String
  brand        String
  modelNumber  String        @unique
  serialNumber String        @unique
  collegeId    Int
  warehouseId  Int
  adminId      Int
  labId        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  status       Status        @default(WORKING)
  type         ComponentType
  admin        Admin         @relation(fields: [adminId], references: [id])
  college      College       @relation(fields: [collegeId], references: [id])
  lab          Lab           @relation(fields: [labId], references: [id])
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  Department   Department[]  @relation("ComponentToDepartment")

  @@index([labId])
  @@index([status])
}

model Department {
  id           Int         @id @default(autoincrement())
  name         String
  departmentId String      @unique
  collegeId    Int
  adminId      Int
  hodId        Int?
  admin        Admin       @relation(fields: [adminId], references: [id])
  college      College     @relation(fields: [collegeId], references: [id])
  Lab          Lab[]
  Component    Component[] @relation("ComponentToDepartment")
  HOD          HOD[]       @relation("HODDepartments")
}

enum ComponentType {
  MONITOR
  KEYBOARD
  MOUSE
  CPU
  PRINTER
  OTHER
}

enum Status {
  WORKING
  FAULTY
  UNDER_REPAIR
  REPLACED
}

enum Role {
  ADMIN
  HOD
}
